{"ast":null,"code":"var _jsxFileName = \"/Volumes/Gangster/codes/upwork/posdcastapp/src/ShowTranscript.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { AudioContext } from './AudioProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport var ShowTranscript = function ShowTranscript(_ref) {\n  _s();\n\n  var lines = _ref.lines;\n\n  var _useContext = useContext(AudioContext),\n      time = _useContext.time,\n      updateSeekTime = _useContext.updateSeekTime;\n\n  var renderWords = function renderWords(item, index) {\n    var isPlaying = time >= item.startTime && time <= item.endTime;\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"word\",\n      style: isPlaying ? {\n        backgroundColor: 'yellow',\n        color: 'black'\n      } : {},\n      onClick: function onClick() {\n        updateSeekTime(item.startTime);\n      },\n      children: [item.word, ' ']\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, _this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"transcript\",\n      children: lines.map(renderWords)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false);\n};\n\n_s(ShowTranscript, \"vp5pkVDizI0jC6C9Xp2DTM6fWtY=\");\n\n_c = ShowTranscript;\n\nvar _c;\n\n$RefreshReg$(_c, \"ShowTranscript\");","map":{"version":3,"sources":["/Volumes/Gangster/codes/upwork/posdcastapp/src/ShowTranscript.tsx"],"names":["React","useContext","AudioContext","ShowTranscript","lines","time","updateSeekTime","renderWords","item","index","isPlaying","startTime","endTime","backgroundColor","color","word","map"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAwBC,UAAxB,QAAqD,OAArD;AACA,SAASC,YAAT,QAA6B,iBAA7B;;;AAYA,OAAO,IAAMC,cAA4C,GAAG,SAA/CA,cAA+C,OAAe;AAAA;;AAAA,MAAZC,KAAY,QAAZA,KAAY;;AACzE,oBAAiCH,UAAU,CAACC,YAAD,CAA3C;AAAA,MAAQG,IAAR,eAAQA,IAAR;AAAA,MAAcC,cAAd,eAAcA,cAAd;;AAEA,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD,EAAaC,KAAb,EAA+B;AACjD,QAAMC,SAAS,GAAGL,IAAI,IAAIG,IAAI,CAACG,SAAb,IAA0BN,IAAI,IAAIG,IAAI,CAACI,OAAzD;AAEA,wBACE;AAEE,MAAA,SAAS,EAAC,MAFZ;AAGE,MAAA,KAAK,EACHF,SAAS,GACL;AACEG,QAAAA,eAAe,EAAE,QADnB;AAEEC,QAAAA,KAAK,EAAE;AAFT,OADK,GAKL,EATR;AAWE,MAAA,OAAO,EAAE,mBAAM;AACbR,QAAAA,cAAc,CAACE,IAAI,CAACG,SAAN,CAAd;AACD,OAbH;AAAA,iBAeGH,IAAI,CAACO,IAfR,EAec,GAfd;AAAA,OACON,KADP;AAAA;AAAA;AAAA;AAAA,aADF;AAmBD,GAtBD;;AAuBA,sBACE;AAAA,2BACE;AAAG,MAAA,SAAS,EAAC,YAAb;AAAA,gBAA2BL,KAAK,CAACY,GAAN,CAAUT,WAAV;AAA3B;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAKD,CA/BM;;GAAMJ,c;;KAAAA,c","sourcesContent":["import React, { useRef, useContext, useEffect } from 'react';\nimport { AudioContext } from './AudioProvider';\n\nexport interface word {\n  startTime: number;\n  endTime: number;\n  word: string;\n}\n\ntype ShowTranscriptType = {\n  lines: word[];\n};\n\nexport const ShowTranscript: React.FC<ShowTranscriptType> = ({ lines }) => {\n  const { time, updateSeekTime } = useContext(AudioContext);\n\n  const renderWords = (item: word, index: number) => {\n    const isPlaying = time >= item.startTime && time <= item.endTime;\n\n    return (\n      <span\n        key={index}\n        className=\"word\"\n        style={\n          isPlaying\n            ? {\n                backgroundColor: 'yellow',\n                color: 'black',\n              }\n            : {}\n        }\n        onClick={() => {\n          updateSeekTime(item.startTime);\n        }}\n      >\n        {item.word}{' '}\n      </span>\n    );\n  };\n  return (\n    <>\n      <p className=\"transcript\">{lines.map(renderWords)}</p>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}