{"ast":null,"code":"var _jsxFileName = \"/Volumes/Gangster/codes/upwork/posdcastapp/src/AudioPlayer.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useRef, useContext, useEffect } from 'react';\nimport { AudioContext } from './AudioProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var AudioPlayer = function AudioPlayer(_ref) {\n  _s();\n\n  var src = _ref.src;\n  var audioRef = useRef(null);\n\n  var _useContext = useContext(AudioContext),\n      seekTime = _useContext.seekTime,\n      updateTime = _useContext.updateTime;\n\n  useEffect(function () {\n    if (audioRef.current && seekTime != 0) {\n      audioRef.current.currentTime = seekTime;\n      audioRef.current.play();\n    }\n  }, [seekTime]);\n  return /*#__PURE__*/_jsxDEV(\"audio\", {\n    controls: true,\n    onTimeUpdate: function onTimeUpdate() {\n      if (audioRef.current) {\n        updateTime(audioRef.current.currentTime);\n      }\n    },\n    ref: audioRef,\n    preload: \"auto\",\n    src: src,\n    style: {\n      width: '100%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(AudioPlayer, \"cwxEWq6vseCvBNbFS3UdzPUpgoI=\");\n\n_c = AudioPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioPlayer\");","map":{"version":3,"sources":["/Volumes/Gangster/codes/upwork/posdcastapp/src/AudioPlayer.tsx"],"names":["React","useRef","useContext","useEffect","AudioContext","AudioPlayer","src","audioRef","seekTime","updateTime","current","currentTime","play","width"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,UAAxB,EAAoCC,SAApC,QAAqD,OAArD;AACA,SAASC,YAAT,QAA6B,iBAA7B;;AAKA,OAAO,IAAMC,WAAuC,GAAG,SAA1CA,WAA0C,OAAa;AAAA;;AAAA,MAAVC,GAAU,QAAVA,GAAU;AAClE,MAAMC,QAAQ,GAAGN,MAAM,CAAmB,IAAnB,CAAvB;;AACA,oBAAiCC,UAAU,CAACE,YAAD,CAA3C;AAAA,MAAQI,QAAR,eAAQA,QAAR;AAAA,MAAkBC,UAAlB,eAAkBA,UAAlB;;AAEAN,EAAAA,SAAS,CAAC,YAAM;AACd,QAAII,QAAQ,CAACG,OAAT,IAAoBF,QAAQ,IAAI,CAApC,EAAuC;AACrCD,MAAAA,QAAQ,CAACG,OAAT,CAAiBC,WAAjB,GAA+BH,QAA/B;AACAD,MAAAA,QAAQ,CAACG,OAAT,CAAiBE,IAAjB;AACD;AACF,GALQ,EAKN,CAACJ,QAAD,CALM,CAAT;AAOA,sBACE;AACE,IAAA,QAAQ,MADV;AAEE,IAAA,YAAY,EAAE,wBAAM;AAClB,UAAID,QAAQ,CAACG,OAAb,EAAsB;AACpBD,QAAAA,UAAU,CAACF,QAAQ,CAACG,OAAT,CAAiBC,WAAlB,CAAV;AACD;AACF,KANH;AAOE,IAAA,GAAG,EAAEJ,QAPP;AAQE,IAAA,OAAO,EAAC,MARV;AASE,IAAA,GAAG,EAAED,GATP;AAUE,IAAA,KAAK,EAAE;AAAEO,MAAAA,KAAK,EAAE;AAAT;AAVT;AAAA;AAAA;AAAA;AAAA,WADF;AAcD,CAzBM;;GAAMR,W;;KAAAA,W","sourcesContent":["import React, { useRef, useContext, useEffect } from 'react';\nimport { AudioContext } from './AudioProvider';\n\ntype AudioPlayerProps = {\n  src: string;\n};\nexport const AudioPlayer: React.FC<AudioPlayerProps> = ({ src }) => {\n  const audioRef = useRef<HTMLAudioElement>(null);\n  const { seekTime, updateTime } = useContext(AudioContext);\n\n  useEffect(() => {\n    if (audioRef.current && seekTime != 0) {\n      audioRef.current.currentTime = seekTime;\n      audioRef.current.play();\n    }\n  }, [seekTime]);\n\n  return (\n    <audio\n      controls\n      onTimeUpdate={() => {\n        if (audioRef.current) {\n          updateTime(audioRef.current.currentTime);\n        }\n      }}\n      ref={audioRef}\n      preload=\"auto\"\n      src={src}\n      style={{ width: '100%' }}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}